(define (add1 n)
    (+ n 1))

(define (sub1 n)
    (- n 1))

(define (pick-up lat n)
    (define (iter-pick lat n)
        (cond
            ((null? lat) 0)
            ((zero? n) (car lat))
            (else
                (iter-pick (cdr lat) (sub1 n)))))
    (iter-pick lat n))

(define (drop-off lat val n)
    (define (list-format lat n)
        (cond
            ((zero? n) lat)
            (else
                (list-format (append lat (cons 0 '())) (sub1 n)))))
    (define (iter-drop lat val n)
        (cond
            ((not (list? lat)) (iter-drop (cons lat '()) val n))
            ((not (number? n)) lat)
            (else
                (cond
                    ((zero? n) (cons val (cdr lat)))
                    ((zero? (length lat))
                        (iter-drop (cons 0 lat) val (sub1 n)))
                    (else
                        (cons (car lat) (iter-drop (cdr lat) val (sub1 n))))))))
    (iter-drop (list-format lat n) val n))


(define (loop-eval lat)
    (cond
        ((null? lat) '())
        (else
            (cond
                ((string=? "[")
                    (loop-eval (split-loop (cdr lat))))
                ((string=? "]")
                    (cdr lat))
                (else
                    (split-loop (cdr lat)))))))


(define (brainfuck-eval lat p env)
    (print "lat=" lat)
    (cond
        ((null? lat) env)
        (else
            (cond
                ((string=? ">" (car lat))
                    (brainfuck-eval (cdr lat) (add1 p) env))
                ((string=? "<" (car lat))
                    (cond
                        ((zero? p)
                            (brainfuck-eval (cdr lat) p env))
                        (else
                            (brainfuck-eval (cdr lat) (sub1 p) env))))
                ((string=? "+" (car lat))
                    (brainfuck-eval
                        (cdr lat) p (drop-off env (add1 (pick-up env p)) p)))
                ((string=? "-" (car lat))
                    (brainfuck-eval
                        (cdr lat) p (drop-off env (sub1 (pick-up env p)) p)))
                ((string=? "." (car lat))
                    (print "print[ " (pick-up env p) " ] ")
                    (brainfuck-eval (cdr lat) p env))
;;ここから未テスト
                ((string=? "[" (car lat))
                    (cond
                        ((zero? (pick-up env p))
                            (iter-eval (split-lat lat) p env))
                        (else
                            (iter-eval (cdr lat) p env))))

                (else
                    (brainfuck-eval (cdr lat) p env))))))

(define (brainfuck line)
    (print "line=" line)
    (cond
        ((null? line) '())
        (else
            (brainfuck-eval (map string (string->list line)) 0 '(0)))))


(define fac
  (lambda (n)
      (define (iter-fac product counter)
        (if (> counter n)     ;  iter-fac が作られたときのフレームの n を参照
            product
            (iter-fac (* product counter) (+ counter 1))))
      (iter-fac 1 1)))


(print (brainfuck ".+++.>++.<.++++++++++.>.>>>>.+++++++++.<<<<<<<<<<<.++++++++++++++++++++++."))
;(print (fac 10))
